"""Helpers for build utils"""

import subprocess
import shlex
import re
from os import environ
from .config import CONTAINER_ID, CONTAINER_NAME

def shell_exec(command_string, cwd, nowait=False):
    """
    Executes given subprocess, returns iterable list of stdout lines

    Keyword arguments:
    command_string -- cmd string to execute
    """
    patch_env()
    cmd_args = shlex.split(command_string)
    with subprocess.Popen(cmd_args,
                          stdout=subprocess.PIPE,
                          stderr=subprocess.STDOUT,
                          universal_newlines=True,
                          cwd=cwd,
                          env=environ) as process:
        if nowait is True:
            return

        for stdout_line in iter(process.stdout.readline, ''):
            yield strip_color(stdout_line)
        return_code = process.wait()
        if return_code:
            raise subprocess.CalledProcessError(return_code, command_string)

def get_create_cmd():
    """Returns cmd string to create Seabass Libertine container"""
    return 'libertine-container-manager create -i {} -n "{}" -t chroot'\
        .format(CONTAINER_ID, CONTAINER_NAME)

def get_destroy_cmd():
    """Returns cmd string to destroy Seabass Libertine container"""
    return 'libertine-container-manager destroy -i {}'\
        .format(CONTAINER_ID)

def get_launch_cmd(app_name, developer_name):
    """Returns cmd string to launch application"""
    return 'bash -c "ubuntu-app-launch {0}.{1}_{0} &"'\
        .format(app_name, developer_name)

def get_container_cmd(command_string):
    """
    Returns cmd string wrapped into a libertine-launch call

    Keyword arguments:
    command_string -- cmd string to execute
    """
    return 'libertine-launch -i {} bash -i -c "{}"'.format(CONTAINER_ID, command_string)

def get_install_python_cmd_array():
    """Returns cmd string to install python 3.6"""
    lines = [
        'curl https://pyenv.run | bash',
        'echo \'export PYENV_ROOT=\\\"$HOME/.pyenv\\\"\' >> ~/.bashrc',
        'echo \'command -v pyenv >/dev/null || \
            export PATH=\\\"$PYENV_ROOT/bin:$PATH\\\"\' >> ~/.bashrc',
        'echo \'eval \\\"$(pyenv init -)\\\"\' >> ~/.bashrc',
        'pyenv install 3.6.15',
        'pyenv global 3.6.15'
    ]
    return map(get_container_cmd, lines)

def get_install_clickable_cmd():
    """
    Returns cmd string to install clickable into a Seabass Libertine container.
    In order to avoid issues with breaking changes in the `dev` branch,
    commit hash is updated manually
    """
    return get_container_cmd('python3.6 -m pip install --user --upgrade clickable-ut==7.*')

def get_run_clickable_cmd(config_file):
    """Returns cmd string to run clickable from a Seabass Libertine container"""
    return get_container_cmd('clickable build --non-interactive --container-mode \
            --skip-review --config={}'.format(config_file))

def get_install_cmd(click_name):
    """Returns cmd string to run clickable from a Seabass Libertine container"""
    return 'bash -c "pkcon install-local --allow-untrusted $(find -name {})"'\
        .format(click_name)

def get_create_project_cmd(options):
    """Returns cmd string to run clickable from a Seabass Libertine container"""
    create_args = ''
    for key in options:
        if options[key] is True:
            create_args += ' --{}'.format(key)
        elif options[key]:
            create_args += ' --{} "{}"'.format(key, options[key])
    return get_container_cmd('clickable create --non-interactive --container-mode {}'\
        .format(create_args))

def get_delete_desktop_files_cmd():
    """Returns cmd string to delete unneeded .desktop files from build container"""
    return 'libertine-container-manager exec -i {} -c \
        "bash -c \'rm /usr/share/applications/*.desktop\'"'\
        .format(CONTAINER_ID)

def patch_env():
    """
    Sets TMPDIR var to existing /tmp directory.
    Prevents issues with various Libertine commands
    """
    environ['TMPDIR'] = '/tmp'
    environ['LD_PRELOAD'] = ''

def strip_color(s): # pylint: disable=invalid-name
    """
    Remove ANSI color/style sequences from a string. The set of all possible
    ANSI sequences is large, so does not try to strip every possible one. But
    does strip some outliers seen not just in text generated by this module, but
    by other ANSI colorizers in the wild. Those include `\x1b[K` (aka EL or
    erase to end of line) and `\x1b[m`, a terse version of the more common
    `\x1b[0m`.

    from: https://github.com/jonathaneunice/colors
    """
    return re.sub('\x1b\\[(K|.*?m)', '', s)
